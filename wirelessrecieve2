-- Wireless Receiver to Control Speedometer

local modem = peripheral.wrap("right") -- Your modem side
local channel = 1

if not modem then
    print("No modem found!")
    return
end

modem.open(channel)

local speedometerRunning = false
local speedometerThread = nil

-- Receiver
local function runReceiver()
    while true do
        local event, side, senderChannel, replyChannel, message, distance = os.pullEvent("modem_message")

        if senderChannel == channel and message == "button_pressed" then
            if not speedometerRunning then
                print("Starting Speedometer...")
                os.queueEvent("start_speedometer")
            else
                print("Stopping Speedometer...")
                os.queueEvent("shutdown_speedometer")
            end
        end
    end
end

-- Manager
local function runSpeedometerManager()
    while true do
        local event = os.pullEvent()

        if event == "start_speedometer" and not speedometerRunning then
            speedometerRunning = true
            local speedometerFunc = loadfile("animatedspeedometer.lua")
            if not speedometerFunc then
                print("Error loading animatedspeedometer.lua")
                speedometerRunning = false
            else
                speedometerThread = coroutine.create(speedometerFunc)
            end
        elseif event == "shutdown_speedometer" and speedometerRunning then
            os.queueEvent("shutdown_speedometer")
        end
    end
end

-- Ticking the speedometer coroutine
local function runSpeedometerTick()
    while true do
        if speedometerThread and coroutine.status(speedometerThread) ~= "dead" then
            local ok, err = coroutine.resume(speedometerThread)
            if not ok then
                print("Speedometer crashed:", err)
                speedometerRunning = false
                speedometerThread = nil
            end
        end
        sleep(0.05) -- Resume every 0.05 seconds
    end
end

parallel.waitForAny(runReceiver, runSpeedometerManager, runSpeedometerTick)
