-- Train Touchscreen Panel 1x4 Monitor, Centered Text, Vertical Dividers, Full Words, Lock Feature

local monitorName = "front" -- adjust if needed
local monitor = peripheral.wrap(monitorName)

if not monitor then
    print("Monitor not found!")
    return
end

monitor.setTextScale(1) -- Big normal text
local monitorWidth, monitorHeight = monitor.getSize()

-- Check monitor size
if monitorWidth ~= 4 or monitorHeight ~= 1 then
    print("Warning: Monitor is not 1x4 size! Current size: "..monitorWidth.."x"..monitorHeight)
end

-- Define button sections
local buttons = {
    {name = "Hatch", section = 1},
    {name = "Lights", section = 2},
    {name = "Smoke", section = 3},
    {name = "Lock", section = 4},
}

local locked = false -- Lock state

-- Helper: Draw everything
local function drawButtons()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()

    -- Draw vertical divider lines between sections
    monitor.setTextColor(colors.white)

    -- Dividers at x=11, x=21, x=31 if we treat 51 pixels across a large monitor
    -- But on a 1x4 monitor, it's simpler:
    -- Let's draw manually between each block visually
    for i = 1, 3 do
        local dividerX = math.floor((i * monitorWidth) / 4) + 1
        for y = 1, monitorHeight do
            monitor.setCursorPos(dividerX, y)
            monitor.write("|")
        end
    end

    -- Draw button labels
    for _, btn in ipairs(buttons) do
        local sectionWidth = monitorWidth / 4
        local x1 = (btn.section - 1) * sectionWidth + 1
        local x2 = btn.section * sectionWidth

        -- Center the text horizontally
        local labelLength = #btn.name
        local labelX = math.floor((x1 + x2) / 2) - math.floor(labelLength / 2)

        -- Center the text vertically
        local labelY = math.floor(monitorHeight / 2) + 1

        monitor.setCursorPos(labelX, labelY)

        if locked and btn.name ~= "Lock" then
            monitor.setTextColor(colors.red)
        else
            monitor.setTextColor(colors.white)
        end

        monitor.write(btn.name)
    end
end

-- Helper: Get button based on touch
local function getButtonAt(x, y)
    local sectionWidth = monitorWidth / 4
    local section = math.ceil(x / sectionWidth)
    for _, btn in ipairs(buttons) do
        if btn.section == section then
            return btn
        end
    end
    return nil
end

-- Helper: Pulse a redstone side
local function pulse(side, duration)
    redstone.setOutput(side, true)
    sleep(duration)
    redstone.setOutput(side, false)
end

-- Handle button presses
local function handleButtonPress(name)
    if locked and name ~= "Lock" then
        print("Panel is locked. No action.")
        return
    end

    if name == "Hatch" then
        print("Pulsing Hatch")
        pulse("left", 0.5)
    elseif name == "Lights" then
        print("Pulsing Lights")
        pulse("right", 0.5)
    elseif name == "Smoke" then
        print("Pulsing Smoke")
        pulse("bottom", 0.5)
    elseif name == "Lock" then
        locked = not locked
        print(locked and "Panel locked" or "Panel unlocked")
    end
end

-- Draw UI
drawButtons()

-- Event loop
print("Touchscreen ready. Waiting for input...")
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")

    local btn = getButtonAt(x, y)
    if btn then
        handleButtonPress(btn.name)
        drawButtons() -- Redraw to update lock color
    end
end
