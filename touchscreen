-- Touchscreen Control Panel for Train

local monitorName = "front" -- Adjust if needed
local monitor = peripheral.wrap(monitorName)

if not monitor then
    print("Monitor not found!")
    return
end

-- Setup
monitor.setTextScale(1)
local monitorWidth, monitorHeight = monitor.getSize()

-- Define button areas (x1, y1, x2, y2)
local buttons = {
    {name = "Hatch", x1 = 1,  y1 = 1, x2 = 10, y2 = 3, color = colors.blue},
    {name = "Lights", x1 = 11, y1 = 1, x2 = 20, y2 = 3, color = colors.yellow},
    {name = "Smoke", x1 = 21, y1 = 1, x2 = 30, y2 = 3, color = colors.gray},
}

-- Helper: Draw all buttons
local function drawButtons()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()

    for _, btn in ipairs(buttons) do
        monitor.setBackgroundColor(btn.color)
        for y = btn.y1, btn.y2 do
            monitor.setCursorPos(btn.x1, y)
            local width = btn.x2 - btn.x1 + 1
            monitor.write(string.rep(" ", width))
        end

        -- Write button name centered
        local labelX = math.floor((btn.x1 + btn.x2) / 2) - math.floor(#btn.name / 2)
        local labelY = math.floor((btn.y1 + btn.y2) / 2)
        monitor.setCursorPos(labelX, labelY)
        monitor.setTextColor(colors.black)
        monitor.write(btn.name)
    end
end

-- Helper: Check if a point is inside a button
local function isInside(x, y, btn)
    return x >= btn.x1 and x <= btn.x2 and y >= btn.y1 and y <= btn.y2
end

-- Action handler
local function handleButtonPress(name)
    if name == "Hatch" then
        redstone.setOutput("left", not redstone.getOutput("left")) -- Toggle hatch
        print("Toggled Hatch")
    elseif name == "Lights" then
        redstone.setOutput("right", not redstone.getOutput("right")) -- Toggle lights
        print("Toggled Lights")
    elseif name == "Smoke" then
        redstone.setOutput("bottom", true) -- Turn on smokescreen
        sleep(2)
        redstone.setOutput("bottom", false) -- Turn off after 2 seconds
        print("Activated Smokescreen")
    end
end

-- Draw UI
drawButtons()

-- Event loop
print("Touchscreen ready. Waiting for input...")
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")

    -- Check which button was touched
    for _, btn in ipairs(buttons) do
        if isInside(x, y, btn) then
            handleButtonPress(btn.name)
        end
    end
end
