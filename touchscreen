-- Advanced Touchscreen Train Panel for 1x4 Monitor with Dividers and Full Words

local monitorName = "front" -- Adjust if needed
local monitor = peripheral.wrap(monitorName)

if not monitor then
    print("Monitor not found!")
    return
end

monitor.setTextScale(0.5) -- <<< Set text scale smaller so full words fit
local monitorWidth, monitorHeight = monitor.getSize()

-- Check monitor size
if monitorWidth ~= 4 or monitorHeight ~= 1 then
    print("Warning: Monitor is not 1x4 size! Current size: "..monitorWidth.."x"..monitorHeight)
end

-- Define button sections
local buttons = {
    {name = "Hatch", section = 1},
    {name = "Lights", section = 2},
    {name = "Smoke", section = 3},
    {name = "Lock", section = 4},
}

local locked = false -- Lock state

-- Helper: Draw all buttons and dividers
local function drawButtons()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()

    -- Draw divider bars
    monitor.setTextColor(colors.white)
    for x = 2, monitorWidth do
        monitor.setCursorPos(x, 1)
        monitor.write("|")
    end

    -- Draw button labels (full words)
    for _, btn in ipairs(buttons) do
        local x1 = (btn.section - 1) * (monitorWidth / 4) + 1
        local x2 = btn.section * (monitorWidth / 4)
        local labelLength = #btn.name
        local labelX = math.floor((x1 + x2) / 2) - math.floor(labelLength / 2)
        local labelY = 1

        monitor.setCursorPos(labelX, labelY)

        if locked and btn.name ~= "Lock" then
            monitor.setTextColor(colors.red)
        else
            monitor.setTextColor(colors.white)
        end

        monitor.write(btn.name)
    end
end

-- Helper: Get button based on touch coordinates
local function getButtonAt(x, y)
    local sectionWidth = monitorWidth / 4
    local section = math.ceil(x / sectionWidth)
    for _, btn in ipairs(buttons) do
        if btn.section == section then
            return btn
        end
    end
    return nil
end

-- Helper: Output a short redstone pulse
local function pulse(side, duration)
    redstone.setOutput(side, true)
    sleep(duration)
    redstone.setOutput(side, false)
end

-- Action handler
local function handleButtonPress(name)
    if locked and name ~= "Lock" then
        print("Panel is locked. No action.")
        return
    end

    if name == "Hatch" then
        print("Pulsing Hatch")
        pulse("left", 0.5)
    elseif name == "Lights" then
        print("Pulsing Lights")
        pulse("right", 0.5)
    elseif name == "Smoke" then
        print("Pulsing Smoke")
        pulse("bottom", 0.5)
    elseif name == "Lock" then
        locked = not locked
        print(locked and "Panel locked" or "Panel unlocked")
    end
end

-- Draw initial UI
drawButtons()

-- Event loop
print("Touchscreen ready. Waiting for input...")
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")

    local btn = getButtonAt(x, y)
    if btn then
        handleButtonPress(btn.name)
        drawButtons() -- Redraw to update lock color
    end
end
