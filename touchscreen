-- Train Touchscreen Panel - Instant Start + Wireless Shutdown + Correct Centered Message

local monitorName = "front" -- Adjust if needed
local modemSide = "bottom"  -- Wireless modem side
local channel = 1           -- Channel to listen for button presses

-- Wrap peripherals
local monitor = peripheral.wrap(monitorName)
local modem = peripheral.wrap(modemSide)

if not monitor or not modem then
    print("Monitor or modem not found!")
    return
end

modem.open(channel) -- Open modem on correct channel

monitor.setTextScale(1) -- Big text
local monitorWidth, monitorHeight = monitor.getSize()

print("Monitor size detected: "..monitorWidth.."x"..monitorHeight)

-- Define button sections and states
local buttons = {
    {name = "Hatch", section = 1, side = "back", toggle = true, active = false},
    {name = "Lights", section = 2, side = "left", toggle = true, active = false},
    {name = "Smoke", section = 3, side = "right", toggle = false, active = false},
    {name = "Lock", section = 4, toggle = false, active = false},
}

local locked = false -- Lock state
local smokeTimer = nil -- Timer for smoke activation
local poweredOn = true -- We start active!

-- Draw the screen
local function drawButtons()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()

    monitor.setTextColor(colors.white)

    -- Draw vertical dividers
    for i = 1, 3 do
        local dividerX = math.floor((i * monitorWidth) / 4) + 1
        for y = 1, monitorHeight do
            monitor.setCursorPos(dividerX, y)
            monitor.write("|")
        end
    end

    -- Draw each button label
    for _, btn in ipairs(buttons) do
        local sectionWidth = monitorWidth / 4
        local x1 = (btn.section - 1) * sectionWidth + 1
        local x2 = btn.section * sectionWidth
        local labelLength = #btn.name
        local labelX = math.floor((x1 + x2) / 2) - math.floor(labelLength / 2)
        local labelY = math.floor(monitorHeight / 2) + 1

        monitor.setCursorPos(labelX, labelY)

        if locked and btn.name ~= "Lock" then
            monitor.setTextColor(colors.red)
        elseif (btn.toggle and btn.active) or (btn.name == "Smoke" and btn.active) or (btn.name == "Lock" and locked) then
            monitor.setTextColor(colors.lime)
        else
            monitor.setTextColor(colors.white)
        end

        monitor.write(btn.name)
    end
end

local function getButtonByName(name)
    for _, btn in ipairs(buttons) do
        if btn.name == name then
            return btn
        end
    end
    return nil
end

local function flashButton(section)
    if not poweredOn then return end
    local sectionWidth = monitorWidth / 4
    local x1 = (section - 1) * sectionWidth + 1
    local x2 = section * sectionWidth

    monitor.setBackgroundColor(colors.gray)

    for y = 1, monitorHeight do
        monitor.setCursorPos(x1, y)
        monitor.write(string.rep(" ", x2 - x1 + 1))
    end

    sleep(0.15)
    drawButtons()
end

local function pulse(side, duration)
    redstone.setOutput(side, true)
    sleep(duration)
    redstone.setOutput(side, false)
end

local function handleButtonPress(name)
    local btn = getButtonByName(name)
    if not btn then
        return
    end

    if locked and name ~= "Lock" then
        print("Panel is locked. No action.")
        return
    end

    if name == "Lock" then
        locked = not locked
        print(locked and "Panel locked" or "Panel unlocked")
    elseif btn.toggle then
        btn.active = not btn.active
        redstone.setOutput(btn.side, btn.active)
        print(btn.name.." "..(btn.active and "Activated" or "Deactivated"))
    elseif name == "Smoke" then
        if not btn.active then
            btn.active = true
            redstone.setOutput(btn.side, true)
            drawButtons()
            smokeTimer = os.startTimer(3)
            print("Smoke activated for 3 seconds")
        end
    end
end

-- Initial draw
drawButtons()

print("Touchscreen ready.")

-- Main event loop
while true do
    local event, p1, p2, p3, p4, p5 = os.pullEvent()

    if event == "monitor_touch" then
        local side, x, y = p1, p2, p3
        local sectionWidth = monitorWidth / 4
        local section = math.ceil(x / sectionWidth)

        for _, btn in ipairs(buttons) do
            if btn.section == section then
                flashButton(btn.section)
                handleButtonPress(btn.name)
                drawButtons()
                break
            end
        end

    elseif event == "timer" and p1 == smokeTimer then
        local smokeBtn = getButtonByName("Smoke")
        if smokeBtn then
            smokeBtn.active = false
        end
        redstone.setOutput("right", false)
        smokeTimer = nil
        drawButtons()
        print("Smoke deactivated")

    elseif event == "modem_message" then
        local modemSide, modemChannel, replyChannel, message, distance = p1, p2, p3, p4, p5

        if modemChannel == channel and tostring(message) == "button_pressed" then
            print("Shutdown signal received!")

            -- Custom System Shutdown message (corrected for 39x5 monitor)
            monitor.setBackgroundColor(colors.black)
            monitor.clear()
            monitor.setTextColor(colors.white)

            -- First line (System)
            monitor.setCursorPos(7, 2)
            monitor.write("==          System          ==")

            -- Second line (Shutdown)
            monitor.setCursorPos(8, 4)
            monitor.write("==        Shutdown        ==")

            sleep(1)

            -- Full cleanup
            monitor.setBackgroundColor(colors.black)
            monitor.clear()
            term.setBackgroundColor(colors.black)
            term.clear()
            term.setCursorPos(1, 1)

            os.shutdown()
        end
    end
end
