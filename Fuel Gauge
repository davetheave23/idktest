-- Fuel Gauge with Modem Toggle and Night Vision Style
local tankPeripheral = "front"
local monitorPeripheral = "right"
local modemPeripheral = "left"
local updateInterval = 1
local maxCapacity = 32000
local channel = 1
local barWidth = 37
local totalWidth = barWidth + 2

-- Wrap peripherals
local monitor = peripheral.wrap(monitorPeripheral)
local modem = peripheral.wrap(modemPeripheral)

if not monitor or not modem then
    error("Monitor or modem not found.")
end

monitor.setTextScale(1)
monitor.setBackgroundColor(colors.black)
monitor.clear()
monitor.setTextColor(colors.lime)

modem.open(channel)

-- State variable
local displayEnabled = false

-- Helper: center text
local function centerText(y, text)
    local x = math.floor((totalWidth - #text) / 2) + 1
    monitor.setCursorPos(x, y)
    monitor.setTextColor(colors.lime)
    monitor.write(text)
end

-- Draw fuel gauge (2-line bar)
local function drawFuelGauge(current)
    local percent = math.floor((current / maxCapacity) * 100)
    percent = math.max(0, math.min(100, percent))
    local fill = math.floor((percent / 100) * barWidth)
    local empty = barWidth - fill

    monitor.clear()

    -- Title
    centerText(1, "Fuel Gauge")

    -- Bar (lines 3â€“4)
    for row = 3, 4 do
        -- Filled part (light gray)
        monitor.setCursorPos(2, row)
        monitor.setBackgroundColor(colors.lightGray)
        monitor.write(string.rep(" ", fill))

        -- Empty part (gray)
        monitor.setBackgroundColor(colors.gray)
        monitor.write(string.rep(" ", empty))

        monitor.setBackgroundColor(colors.black)

        -- Draw brackets (lime green)
        monitor.setCursorPos(1, row)
        monitor.setTextColor(colors.lime)
        monitor.write("[")
        monitor.setCursorPos(barWidth + 2, row)
        monitor.write("]")
    end

    -- Fuel level text
    local text = string.format("%d mB / %d mB (%d%%)", current, maxCapacity, percent)
    centerText(5, text)
end

-- Modem listener (toggles display on/off)
local function listenForToggle()
    while true do
        local event, side, senderChannel, replyChannel, message = os.pullEvent("modem_message")
        if senderChannel == channel and message == "button_pressed" then
            displayEnabled = not displayEnabled
            if not displayEnabled then
                monitor.setBackgroundColor(colors.black)
                monitor.clear()
            end
        end
    end
end

-- Gauge updater
local function gaugeLoop()
    while true do
        if displayEnabled then
            local tank = peripheral.wrap(tankPeripheral)
            local current = 0

            if tank then
                local raw = ""
                if tank.getText then raw = tank.getText()
                elseif tank.readAll then raw = tank.readAll()
                elseif tank.getLine then raw = tank.getLine(1) end

                local value = string.match(raw, "(%d+)%s*mB")
                current = tonumber(value) or 0
            end

            drawFuelGauge(current)
        end

        sleep(updateInterval)
    end
end

-- Run both tasks
parallel.waitForAny(gaugeLoop, listenForToggle)
