-- ComputerCraft Fuel Gauge for 1x4 Monitor
-- Configuration
local monitorSide = "right" -- Side where the monitor is connected
local maxFuel = 32000       -- Maximum fuel capacity
local updateInterval = 0.5  -- Update interval in seconds
local targetName = "front"  -- Name of the target peripheral (CC:Tweaked bridge)

-- Colors
local backgroundColor = colors.black
local emptyColor = colors.gray
local fillColor = colors.white
local textColor = colors.white

-- Initialize peripherals
local monitor = peripheral.wrap(monitorSide)
if not monitor then
    error("Monitor not found on " .. monitorSide .. " side")
end

-- Set monitor scale for better visibility
monitor.setTextScale(0.5)

-- Get monitor dimensions
local monitorWidth, monitorHeight = monitor.getSize()
print("Monitor size: " .. monitorWidth .. "x" .. monitorHeight)

-- Create a function to draw the fuel gauge
function drawFuelGauge(fuelLevel)
    monitor.setBackgroundColor(backgroundColor)
    monitor.setTextColor(textColor)
    monitor.clear()
    
    -- Calculate percentage
    local percentage = math.min(fuelLevel / maxFuel, 1)
    local percentText = string.format("%d%%", math.floor(percentage * 100))
    
    -- Draw title
    local title = "Fuel Gauge"
    monitor.setCursorPos(math.floor((monitorWidth - #title) / 2) + 1, 1)
    monitor.write(title)
    
    -- Draw the gauge label and brackets
    monitor.setCursorPos(2, 3)
    monitor.write("Fuel: [")
    
    local gaugeWidth = monitorWidth - 11 -- Accounting for "Fuel: [" and "] XX%"
    local endBracketPos = 8 + gaugeWidth
    
    monitor.setCursorPos(endBracketPos, 3)
    monitor.write("] " .. percentText)
    
    -- Draw the gauge itself
    local filledBlocks = math.floor(percentage * gaugeWidth)
    local emptyBlocks = gaugeWidth - filledBlocks
    
    -- Draw filled blocks
    monitor.setTextColor(fillColor)
    monitor.setCursorPos(8, 3)
    monitor.write(string.rep("█", filledBlocks))
    
    -- Draw empty blocks
    monitor.setTextColor(emptyColor)
    monitor.setCursorPos(8 + filledBlocks, 3)
    monitor.write(string.rep("█", emptyBlocks))
    
    -- Draw actual value on line 5
    monitor.setTextColor(textColor)
    local valueText = string.format("%d / %d mB", fuelLevel, maxFuel)
    monitor.setCursorPos(math.floor((monitorWidth - #valueText) / 2) + 1, 5)
    monitor.write(valueText)
end

-- Function to get fuel level from target block
function getFuelLevel()
    local target = peripheral.wrap(targetName)
    if not target then
        print("Warning: Target peripheral not found. Using random data for testing.")
        -- For testing, return random fuel level
        return math.random(0, maxFuel)
    end
    
    -- Try to get fuel level from line 1 of the target block
    local success, result = pcall(function()
        -- Read the first line of data from the target block
        local line = target.getLine(1)
        
        -- Extract just the numeric part using pattern matching
        local numberStr = string.match(line, "^%s*(%d+)")
        
        -- Convert to number
        return tonumber(numberStr) or 0
    end)
    
    if not success then
        print("Error getting fuel level: " .. tostring(result))
        -- Return a simulated value for testing
        return math.random(0, maxFuel)
    end
    
    return result
end

-- Main loop
print("Fuel gauge running. Press Ctrl+T to terminate.")
while true do
    local fuelLevel = getFuelLevel()
    print("Fuel level: " .. fuelLevel .. " / " .. maxFuel .. " (" .. string.format("%d%%", math.floor((fuelLevel / maxFuel) * 100)) .. ")")
    drawFuelGauge(fuelLevel)
    sleep(updateInterval)
end
