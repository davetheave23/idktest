-- Full corrected code for dual speedometers with smooth hand animation and correct shortest rotation

local monitorName = "top"
local leftTrackName = "back"
local rightTrackName = "bottom"
local inputSide = "right"

local monitor = peripheral.wrap(monitorName)
local leftTrack = peripheral.wrap(leftTrackName)
local rightTrack = peripheral.wrap(rightTrackName)

if not monitor then
    print("Monitor not found")
    return
end

monitor.setTextScale(0.5)
local monitorWidth, monitorHeight = monitor.getSize()

local function clearMonitor()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()
end

local function drawPoint(x, y, char, color)
    if x >= 1 and x <= monitorWidth and y >= 1 and y <= monitorHeight then
        monitor.setCursorPos(math.floor(x), math.floor(y))
        monitor.setTextColor(color or colors.white)
        monitor.write(char or "o")
    end
end

local function drawCircle(cx, cy, radius, isConnected)
    for i = 0, 360, 3 do
        local rad = math.rad(i)
        local x = cx + math.cos(rad) * radius
        local y = cy + math.sin(rad) * radius
        drawPoint(x, y, "*", isConnected and colors.lime or colors.red)
    end

    drawPoint(cx, cy - radius + 1, "0", colors.yellow)
    drawPoint(cx + radius - 1, cy, "F", colors.yellow)
    drawPoint(cx - radius + 1, cy, "R", colors.yellow)
end

local function drawDial(cx, cy, radius, angle, speed, isConnected)
    drawCircle(cx, cy, radius, isConnected)

    if isConnected then
        local rad = math.rad(angle)
        local needleLength = radius - 2

        for i = 1, needleLength do
            local handX = cx + math.cos(rad) * i
            local handY = cy + math.sin(rad) * i

            if i == needleLength then
                drawPoint(handX, handY, "@", colors.red)
            elseif i > needleLength * 0.7 then
                drawPoint(handX, handY, "|", colors.orange)
            else
                drawPoint(handX, handY, "|", colors.white)
            end
        end

        drawPoint(cx, cy, "+", colors.cyan)
    else
        drawPoint(cx, cy, "X", colors.red)
    end

    local speedText = isConnected and tostring(math.abs(math.floor(speed))) or "N/A"
    local direction = ""
    if isConnected then
        if speed < 0 then  
            direction = "F"
        elseif speed > 0 then
            direction = "R"
        end
    end

    monitor.setCursorPos(cx - #speedText/2, cy + radius + 1)
    monitor.setTextColor(colors.white)
    monitor.write(speedText)

    if direction ~= "" then
        monitor.setCursorPos(cx + #speedText/2 + 1, cy + radius + 1)
        monitor.setTextColor(speed < 0 and colors.lime or colors.red)
        monitor.write(direction)
    end
end

local function getRawSpeed(track, lineNum)
    if not track then return 0 end

    local success, data = pcall(function() return track.getLine(lineNum) end)

    if not success then
        return 0
    end

    local rawSpeed = 0

    if type(data) == "table" then
        if data.text then
            local speedStr = tostring(data.text):match("-?%d+%.?%d*")
            rawSpeed = tonumber(speedStr) or 0
        elseif data.value then
            rawSpeed = tonumber(data.value) or 0
        end
    elseif type(data) == "string" then
        local speedStr = data:match("-?%d+%.?%d*")
        rawSpeed = tonumber(speedStr) or 0
    elseif type(data) == "number" then
        rawSpeed = data
    end

    return rawSpeed
end

-- Speed to angle conversion
local function speedToAngle(speed)
    local maxSpeed = 100
    if speed > maxSpeed then speed = maxSpeed end
    if speed < -maxSpeed then speed = -maxSpeed end

    if speed == 0 then
        return 270
    elseif speed < 0 then
        local angle = 270 - ((-speed) / maxSpeed * 270)
        if angle < 0 then angle = angle + 360 end
        return angle
    else
        local angle = 270 + ((speed) / maxSpeed * 270)
        if angle >= 360 then angle = angle - 360 end
        return angle
    end
end

-- Move angle toward target angle, shortest path
local function moveAngleTowards(current, target, step)
    local diff = (target - current + 360) % 360
    if diff == 0 then
        return current
    elseif diff <= 180 then
        local move = math.min(step, diff)
        return (current + move) % 360
    else
        local move = math.min(step, 360 - diff)
        return (current - move + 360) % 360
    end
end

-- Initialize displayed angles and speeds
local displayedLeftAngle = 270
local displayedRightAngle = 270
local displayedLeftSpeed = 0
local displayedRightSpeed = 0

print("Starting speedometer. Press Ctrl+T to terminate.")

-- Main event loop
while true do
    local event = os.pullEvent()

    if event == "shutdown_speedometer" then
        print("Shutdown signal received for speedometer!")
        clearMonitor()
        monitor.setBackgroundColor(colors.black)
        monitor.clear()
        term.setBackgroundColor(colors.black)
        term.clear()
        term.setCursorPos(1, 1)
        break
    elseif event == "timer" or event == "redstone" then
        -- Ignore timer/redstone events directly
    else
        -- Main drawing update (still every frame)
        if not inputSide or redstone.getInput(inputSide) then
            clearMonitor()

            local leftSpeed = leftTrack and getRawSpeed(leftTrack, 1) or 0
            local rightSpeed = rightTrack and getRawSpeed(rightTrack, 2) or 0

            local targetLeftAngle = speedToAngle(leftSpeed)
            local targetRightAngle = speedToAngle(rightSpeed)

            -- Smooth angle movement
            displayedLeftAngle = moveAngleTowards(displayedLeftAngle, targetLeftAngle, 5) -- 5 degrees per frame
            displayedRightAngle = moveAngleTowards(displayedRightAngle, targetRightAngle, 5)

            displayedLeftSpeed = leftSpeed
            displayedRightSpeed = rightSpeed

            -- Draw dials
            drawDial(10, 8, 7, displayedLeftAngle, displayedLeftSpeed, leftTrack ~= nil)
            drawDial(30, 8, 7, displayedRightAngle, displayedRightSpeed, rightTrack ~= nil)

            monitor.setCursorPos(1, 1)
            monitor.setTextColor(colors.yellow)
            monitor.write("L: " .. (leftTrack and "OK" or "X") .. " R: " .. (rightTrack and "OK" or "X"))
        else
            clearMonitor()
        end
    end

    sleep(0.1)
end
