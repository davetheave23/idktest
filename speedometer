-- Animated Dual Speedometer with Self-Termination

local monitorName = "top"
local leftTrackName = "back"
local rightTrackName = "bottom"
local modemName = "right"  -- Add modem here
local channel = 1  -- Same channel as the button

-- Wrap peripherals
local monitor = peripheral.wrap(monitorName)
local leftTrack = peripheral.wrap(leftTrackName)
local rightTrack = peripheral.wrap(rightTrackName)
local modem = peripheral.wrap(modemName)  -- Wrap the modem

if not monitor then
    print("Monitor not found!")
    return
end

if not modem then
    print("Modem not found!")
    return
end

-- Open the channel to listen for button presses
modem.open(channel)

monitor.setTextScale(0.5)
local monitorWidth, monitorHeight = monitor.getSize()

-- Helper Functions
local function clearMonitor()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()
end

local function drawPoint(x, y, char, color)
    if x >= 1 and x <= monitorWidth and y >= 1 and y <= monitorHeight then
        monitor.setCursorPos(math.floor(x), math.floor(y))
        monitor.setTextColor(color or colors.white)
        monitor.write(char or "o")
    end
end

local function drawCircle(cx, cy, radius, isConnected)
    for i = 0, 360, 3 do
        local rad = math.rad(i)
        local x = cx + math.cos(rad) * radius
        local y = cy + math.sin(rad) * radius
        drawPoint(x, y, "*", isConnected and colors.lime or colors.red)
    end
    drawPoint(cx, cy - radius + 1, "0", colors.yellow)
    drawPoint(cx + radius - 1, cy, "F", colors.yellow)
    drawPoint(cx - radius + 1, cy, "R", colors.yellow)
end

local function drawDial(cx, cy, radius, angle, speed, isConnected)
    drawCircle(cx, cy, radius, isConnected)

    if isConnected then
        local rad = math.rad(angle)
        local needleLength = radius - 2
        for i = 1, needleLength do
            local handX = cx + math.cos(rad) * i
            local handY = cy + math.sin(rad) * i
            if i == needleLength then
                drawPoint(handX, handY, "@", colors.red)
            elseif i > needleLength * 0.7 then
                drawPoint(handX, handY, "|", colors.orange)
            else
                drawPoint(handX, handY, "|", colors.white)
            end
        end
        drawPoint(cx, cy, "+", colors.cyan)
    else
        drawPoint(cx, cy, "X", colors.red)
    end

    -- Speed number
    local speedText = isConnected and tostring(math.abs(math.floor(speed))) or "N/A"
    local direction = ""
    if isConnected then
        if speed < 0 then
            direction = "F"
        elseif speed > 0 then
            direction = "R"
        end
    end

    monitor.setCursorPos(math.floor(cx - #speedText / 2), cy + radius + 1)
    monitor.setTextColor(colors.white)
    monitor.write(speedText)

    if direction ~= "" then
        monitor.setCursorPos(math.floor(cx + #speedText / 2 + 1), cy + radius + 1)
        monitor.setTextColor(speed < 0 and colors.lime or colors.red)
        monitor.write(direction)
    end
end

local function getRawSpeed(track, lineNum)
    if not track then return 0 end
    local success, data = pcall(function() return track.getLine(lineNum) end)
    if not success then return 0 end

    if type(data) == "table" and data.text then
        return tonumber(data.text:match("-?%d+%.?%d*")) or 0
    elseif type(data) == "string" then
        return tonumber(data:match("-?%d+%.?%d*")) or 0
    elseif type(data) == "number" then
        return data
    end

    return 0
end

local function speedToAngle(speed)
    local maxSpeed = 100
    if speed > maxSpeed then speed = maxSpeed end
    if speed < -maxSpeed then speed = -maxSpeed end

    if speed == 0 then
        return 270
    elseif speed < 0 then
        return (270 - ((-speed) / maxSpeed * 270)) % 360
    else
        return (270 + (speed / maxSpeed * 270)) % 360
    end
end

local function moveAngleTowards(current, target, step)
    local diff = (target - current + 360) % 360
    if diff == 0 then
        return current
    elseif diff <= 180 then
        return (current + math.min(step, diff)) % 360
    else
        return (current - math.min(step, 360 - diff) + 360) % 360
    end
end

-- Initial angles
local displayedLeftAngle = 270
local displayedRightAngle = 270

-- Main speedometer updating loop
local function updateLoop()
    while true do
        clearMonitor()

        local leftSpeed = leftTrack and getRawSpeed(leftTrack, 1) or 0
        local rightSpeed = rightTrack and getRawSpeed(rightTrack, 2) or 0

        local targetLeftAngle = speedToAngle(leftSpeed)
        local targetRightAngle = speedToAngle(rightSpeed)

        displayedLeftAngle = moveAngleTowards(displayedLeftAngle, targetLeftAngle, 5)
        displayedRightAngle = moveAngleTowards(displayedRightAngle, targetRightAngle, 5)

        drawDial(10, 8, 7, displayedLeftAngle, leftSpeed, leftTrack ~= nil)
        drawDial(30, 8, 7, displayedRightAngle, rightSpeed, rightTrack ~= nil)

        monitor.setCursorPos(1, 1)
        monitor.setTextColor(colors.yellow)
        monitor.write("L: " .. (leftTrack and "OK" or "X") .. " R: " .. (rightTrack and "OK" or "X"))

        sleep(0.1)
    end
end

-- Button message listener
local function listenForButton()
    while true do
        local event, side, senderChannel, replyChannel, message, distance = os.pullEvent("modem_message")
        
        if senderChannel == channel and message == "button_pressed" then
            -- If we receive a button press, exit the program
            print("Button press detected, shutting down speedometer")
            return -- This will exit the function and terminate the parallel waitForAny
        end
    end
end

-- Run both loops together
print("Speedometer started - waiting for button press to exit")
parallel.waitForAny(updateLoop, listenForButton)

-- Clean up when exiting
clearMonitor()
monitor.setCursorPos(1, 1)
monitor.setTextColor(colors.white)
monitor.write("Speedometer stopped")

term.setBackgroundColor(colors.black)
term.clear()
term.setCursorPos(1, 1)
print("Speedometer shutdown complete.")
