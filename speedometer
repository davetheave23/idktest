-- Full corrected code for dual speedometers with proper direction indicators and gradual animation

-- Setup and peripheral wrapping
local monitorName = "top"
local leftTrackName = "back"
local rightTrackName = "bottom"
local inputSide = "right"

local monitor = peripheral.wrap(monitorName)
local leftTrack = peripheral.wrap(leftTrackName)
local rightTrack = peripheral.wrap(rightTrackName)

if not monitor then
    print("Monitor not found")
    return
end

monitor.setTextScale(0.5)
local monitorWidth, monitorHeight = monitor.getSize()

local function clearMonitor()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()
end

local function drawPoint(x, y, char, color)
    if x >= 1 and x <= monitorWidth and y >= 1 and y <= monitorHeight then
        monitor.setCursorPos(math.floor(x), math.floor(y))
        monitor.setTextColor(color or colors.white)
        monitor.write(char or "o")
    end
end

-- Draw circle outline
local function drawCircle(cx, cy, radius, isConnected)
    for i = 0, 360, 3 do
        local rad = math.rad(i)
        local x = cx + math.cos(rad) * radius
        local y = cy + math.sin(rad) * radius
        drawPoint(x, y, "*", isConnected and colors.lime or colors.red)
    end
end

-- Draw dial with working hand movement
local function drawDial(cx, cy, radius, speed, isConnected, lastAngle)
    drawCircle(cx, cy, radius, isConnected)
    
    if isConnected then
        local maxSpeed = 100
        if speed > maxSpeed then speed = maxSpeed end
        if speed < -maxSpeed then speed = -maxSpeed end
        
        local targetAngle
        if speed == 0 then
            targetAngle = 270
        elseif speed < 0 then
            targetAngle = 270 - ((-speed) / maxSpeed * 270)
            if targetAngle < 0 then targetAngle = targetAngle + 360 end
        else
            targetAngle = 270 + (speed / maxSpeed * 270)
            if targetAngle >= 360 then targetAngle = targetAngle - 180 end
        end
        
        local angleStep = (targetAngle - lastAngle) * 0.1 -- Gradual step for animation
        if math.abs(angleStep) < 0.5 then
            lastAngle = targetAngle
        else
            lastAngle = lastAngle + angleStep
        end
        
        local rad = math.rad(lastAngle)
        local needleLength = radius - 2
        
        for i = 1, needleLength do
            local handX = cx + math.cos(rad) * i
            local handY = cy + math.sin(rad) * i
            
            if i == needleLength then
                drawPoint(handX, handY, "@", colors.red)
            elseif i > needleLength * 0.7 then
                drawPoint(handX, handY, "|", colors.orange)
            else
                drawPoint(handX, handY, "|", colors.white)
            end
        end
        
        drawPoint(cx, cy, "+", colors.cyan)
    else
        drawPoint(cx, cy, "X", colors.red)
    end
    
    local speedText = isConnected and tostring(math.abs(math.floor(speed))) or "N/A"
    local direction = ""
    if isConnected then
        if speed < 0 then  
            direction = "F"
        elseif speed > 0 then
            direction = "R"
        end
    end
    
    monitor.setCursorPos(cx - #speedText / 2, cy + radius + 1)
    monitor.setTextColor(colors.white)
    monitor.write(speedText)
    
    if direction ~= "" then
        monitor.setCursorPos(cx + #speedText / 2 + 1, cy + radius + 1)
        monitor.setTextColor(speed < 0 and colors.lime or colors.red)
        monitor.write(direction)
    end
    
    return lastAngle
end

local function getRawSpeed(track, lineNum)
    if not track then return 0 end
    
    local success, data = pcall(function() return track.getLine(lineNum) end)
    
    if not success then
        return 0
    end
    
    local rawSpeed = 0
    
    if type(data) == "table" then
        if data.text then
            local speedStr = tostring(data.text):match("-?%d+%.?%d*")
            rawSpeed = tonumber(speedStr) or 0
        elseif data.value then
            rawSpeed = tonumber(data.value) or 0
        end
    elseif type(data) == "string" then
        local speedStr = data:match("-?%d+%.?%d*")
        rawSpeed = tonumber(speedStr) or 0
    elseif type(data) == "number" then
        rawSpeed = data
    end
    
    return rawSpeed
end

print("Starting speedometer. Press Ctrl+T to terminate.")
local lastLeftAngle = 270
local lastRightAngle = 270

while true do
    if not inputSide or redstone.getInput(inputSide) then
        clearMonitor()
        
        local leftSpeed = leftTrack and getRawSpeed(leftTrack, 1) or 0
        local rightSpeed = rightTrack and getRawSpeed(rightTrack, 2) or 0
        
        print("Left speed: " .. leftSpeed .. ", Right speed: " .. rightSpeed)
        
        lastLeftAngle = drawDial(10, 8, 7, leftSpeed, leftTrack ~= nil, lastLeftAngle)
        lastRightAngle = drawDial(30, 8, 7, rightSpeed, rightTrack ~= nil, lastRightAngle)
        
        monitor.setCursorPos(1, 1)
        monitor.setTextColor(colors.yellow)
        monitor.write("L: " .. (leftTrack and "OK" or "X") .. " R: " .. (rightTrack and "OK" or "X"))
    else
        clearMonitor()
    end
    sleep(0.1)
end
