-- Full corrected code for dual speedometers with smooth hand animation and proper direction indicators
-- Setup - ADJUSTED for correct peripheral locations
local monitorName = "top" -- change if needed
local leftTrackName = "back" -- changed from "left" to "back"
local rightTrackName = "bottom" -- changed from "right" to "bottom" 
local inputSide = "right" -- redstone input side (lever or button)

-- Get peripherals
local monitor = peripheral.wrap(monitorName)
local leftTrack = peripheral.wrap(leftTrackName)
local rightTrack = peripheral.wrap(rightTrackName)

-- Basic checks
if not monitor then
    print("Monitor not found")
    return
end

-- Set monitor scale
monitor.setTextScale(0.5)
local monitorWidth, monitorHeight = monitor.getSize()

-- Monitor clear function
local function clearMonitor()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()
end

-- Draw point at specified coordinates - simple and reliable
local function drawPoint(x, y, char, color)
    if x >= 1 and x <= monitorWidth and y >= 1 and y <= monitorHeight then
        monitor.setCursorPos(math.floor(x), math.floor(y))
        monitor.setTextColor(color or colors.white)
        monitor.write(char or "o")
    end
end

-- Draw circle outline
local function drawCircle(cx, cy, radius, isConnected)
    for i = 0, 360, 3 do
        local rad = math.rad(i)
        local x = cx + math.cos(rad) * radius
        local y = cy + math.sin(rad) * radius
        drawPoint(x, y, "*", isConnected and colors.lime or colors.red)
    end

    -- Mark key points
    drawPoint(cx, cy - radius + 1, "0", colors.yellow) -- Top = 270°
    drawPoint(cx + radius - 1, cy, "F", colors.yellow) -- Right = 0°
    drawPoint(cx - radius + 1, cy, "R", colors.yellow) -- Left = 180°
end

-- Draw dial with working hand movement
local function drawDial(cx, cy, radius, speed, isConnected)
    -- Draw dial circle and key points
    drawCircle(cx, cy, radius, isConnected)

    -- Draw the dial hand (only if connected)
    if isConnected then
        -- Calculate angle based on speed
        local maxSpeed = 100
        if speed > maxSpeed then speed = maxSpeed end
        if speed < -maxSpeed then speed = -maxSpeed end

        local angle
        if speed == 0 then
            angle = 270
        elseif speed < 0 then
            angle = 270 - ((-speed) / maxSpeed * 270)
            if angle < 0 then angle = angle + 360 end
        else
            angle = 270 + ((speed) / maxSpeed * 270)
            if angle >= 360 then angle = angle - 360 end
        end

        local rad = math.rad(angle)
        local needleLength = radius - 2

        for i = 1, needleLength do
            local handX = cx + math.cos(rad) * i
            local handY = cy + math.sin(rad) * i

            if i == needleLength then
                drawPoint(handX, handY, "@", colors.red)
            elseif i > needleLength * 0.7 then
                drawPoint(handX, handY, "|", colors.orange)
            else
                drawPoint(handX, handY, "|", colors.white)
            end
        end

        -- Draw center hub
        drawPoint(cx, cy, "+", colors.cyan)
    else
        drawPoint(cx, cy, "X", colors.red)
    end

    -- Draw speed values at bottom
    local speedText = isConnected and tostring(math.abs(math.floor(speed))) or "N/A"
    local direction = ""
    if isConnected then
        if speed < 0 then  
            direction = "F"
        elseif speed > 0 then
            direction = "R"
        end
    end

    monitor.setCursorPos(cx - #speedText/2, cy + radius + 1)
    monitor.setTextColor(colors.white)
    monitor.write(speedText)

    if direction ~= "" then
        monitor.setCursorPos(cx + #speedText/2 + 1, cy + radius + 1)
        monitor.setTextColor(speed < 0 and colors.lime or colors.red)
        monitor.write(direction)
    end
end

-- Get raw speed data
local function getRawSpeed(track, lineNum)
    if not track then return 0 end

    local success, data = pcall(function() return track.getLine(lineNum) end)

    if not success then
        return 0
    end

    local rawSpeed = 0

    if type(data) == "table" then
        if data.text then
            local speedStr = tostring(data.text):match("-?%d+%.?%d*")
            rawSpeed = tonumber(speedStr) or 0
        elseif data.value then
            rawSpeed = tonumber(data.value) or 0
        end
    elseif type(data) == "string" then
        local speedStr = data:match("-?%d+%.?%d*")
        rawSpeed = tonumber(speedStr) or 0
    elseif type(data) == "number" then
        rawSpeed = data
    end

    return rawSpeed
end

-- Smooth movement helper function
local function moveTowards(current, target, step)
    if math.abs(target - current) <= step then
        return target
    elseif current < target then
        return current + step
    else
        return current - step
    end
end

-- Initialize displayed speeds
local displayedLeftSpeed = 0
local displayedRightSpeed = 0

-- Main loop
print("Starting speedometer. Press Ctrl+T to terminate.")
while true do
    if not inputSide or redstone.getInput(inputSide) then
        clearMonitor()

        -- Read raw speeds
        local leftSpeed = leftTrack and getRawSpeed(leftTrack, 1) or 0
        local rightSpeed = rightTrack and getRawSpeed(rightTrack, 2) or 0

        -- Smoothly update displayed speeds
        displayedLeftSpeed = moveTowards(displayedLeftSpeed, leftSpeed, 2)
        displayedRightSpeed = moveTowards(displayedRightSpeed, rightSpeed, 2)

        -- Debug: Print actual and displayed speeds
        print("Left speed: " .. leftSpeed .. " (Display: " .. displayedLeftSpeed .. ") | Right speed: " .. rightSpeed .. " (Display: " .. displayedRightSpeed .. ")")

        -- Draw dials with smoothed speeds
        drawDial(10, 8, 7, displayedLeftSpeed, leftTrack ~= nil)
        drawDial(30, 8, 7, displayedRightSpeed, rightTrack ~= nil)

        -- Connection status
        monitor.setCursorPos(1, 1)
        monitor.setTextColor(colors.yellow)
        monitor.write("L: " .. (leftTrack and "OK" or "X") .. " R: " .. (rightTrack and "OK" or "X"))
    else
        clearMonitor()
    end
    sleep(0.1)
end
