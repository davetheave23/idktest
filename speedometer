-- Full corrected code for dual speedometers with proper direction indicators
-- Setup - ADJUSTED for correct peripheral locations
local monitorName = "top" -- change if needed
local leftTrackName = "back" -- changed from "left" to "back"
local rightTrackName = "bottom" -- changed from "right" to "bottom" 
local inputSide = "right" -- redstone input side (lever or button)

-- Get peripherals
local monitor = peripheral.wrap(monitorName)
local leftTrack = peripheral.wrap(leftTrackName)
local rightTrack = peripheral.wrap(rightTrackName)

-- Basic checks
if not monitor then
    print("Monitor not found")
    return
end

-- Set monitor scale
monitor.setTextScale(0.5)
local monitorWidth, monitorHeight = monitor.getSize()

-- Monitor clear function
local function clearMonitor()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()
end

-- Draw point at specified coordinates - simple and reliable
local function drawPoint(x, y, char, color)
    if x >= 1 and x <= monitorWidth and y >= 1 and y <= monitorHeight then
        monitor.setCursorPos(math.floor(x), math.floor(y))
        monitor.setTextColor(color or colors.white)
        monitor.write(char or "o")
    end
end

-- Draw circle outline
local function drawCircle(cx, cy, radius, isConnected)
    for i = 0, 360, 3 do
        local rad = math.rad(i)
        local x = cx + math.cos(rad) * radius
        local y = cy + math.sin(rad) * radius
        drawPoint(x, y, "*", isConnected and colors.lime or colors.red)
    end
    
    -- Mark key points
    drawPoint(cx, cy - radius + 1, "0", colors.yellow) -- Top = 270°
    drawPoint(cx + radius - 1, cy, "F", colors.yellow) -- Right = 0°
    drawPoint(cx - radius + 1, cy, "R", colors.yellow) -- Left = 180°
end

-- Store the current angle for animation
local currentAngle = 270 -- Start at zero speed (top of the dial)

-- Animate the dial movement
local function animateDial(cx, cy, radius, speed, isConnected)
    -- Calculate the target angle based on the speed
    local targetAngle
    if speed == 0 then
        targetAngle = 270 -- pointing up at zero
    elseif speed < 0 then
        -- Forward (negative speed): angle between 270° (up) and 0° (right)
        targetAngle = 270 - ((-speed)/100 * 270) -- Negative speed, more negative means more towards 0°
        if targetAngle < 0 then targetAngle = targetAngle + 360 end -- Keep angle in 0-360 range
    else
        -- Reverse (positive speed): angle between 270° (up) and 180° (left)
        targetAngle = 270 + ((speed)/100 * 270) -- Positive speed, more positive means more towards 180°
        if targetAngle >= 360 then targetAngle = targetAngle - 360 end -- Keep angle within 0-360 range
    end

    -- Smooth transition between current angle and target angle
    local angleDifference = targetAngle - currentAngle
    if angleDifference > 180 then
        angleDifference = angleDifference - 360 -- Adjust for shortest angle path
    elseif angleDifference < -180 then
        angleDifference = angleDifference + 360 -- Adjust for shortest angle path
    end

    -- Update current angle gradually
    local increment = angleDifference * 0.1 -- Adjust the value to control animation speed
    currentAngle = currentAngle + increment

    -- Ensure the angle stays within the 0-360 range
    if currentAngle < 0 then currentAngle = currentAngle + 360 end
    if currentAngle >= 360 then currentAngle = currentAngle - 360 end

    -- Convert to radians
    local rad = math.rad(currentAngle)

    -- Draw needle from center outward
    local needleLength = radius - 2

    -- Draw multiple points to make a thicker hand
    for i = 1, needleLength do
        local handX = cx + math.cos(rad) * i
        local handY = cy + math.sin(rad) * i

        if i == needleLength then
            -- Needle tip
            drawPoint(handX, handY, "@", colors.red)
        elseif i > needleLength * 0.7 then
            -- Needle shaft near tip
            drawPoint(handX, handY, "|", colors.orange)
        else
            -- Needle base
            drawPoint(handX, handY, "|", colors.white)
        end
    end

    -- Draw center hub
    drawPoint(cx, cy, "+", colors.cyan)

    -- Draw speed values at bottom (absolute value)
    local speedText = isConnected and tostring(math.abs(math.floor(speed))) or "N/A"
    local direction = ""
    if isConnected then
        -- Negative = Forward, Positive = Reverse
        if speed < 0 then  
            direction = "F" -- Forward
        elseif speed > 0 then
            direction = "R" -- Reverse
        end
    end

    -- Display speed and direction
    monitor.setCursorPos(cx - #speedText/2, cy + radius + 1)
    monitor.setTextColor(colors.white)
    monitor.write(speedText)

    if direction ~= "" then
        monitor.setCursorPos(cx + #speedText/2 + 1, cy + radius + 1)
        monitor.setTextColor(speed < 0 and colors.lime or colors.red)
        monitor.write(direction)
    end
end

-- Get raw speed data without changing sign
local function getRawSpeed(track, lineNum)
    if not track then return 0 end
    
    -- Try to get the line data
    local success, data = pcall(function() return track.getLine(lineNum) end)
    
    if not success then
        return 0
    end
    
    -- Parse speed value based on data type
    local rawSpeed = 0
    
    if type(data) == "table" then
        if data.text then
            local speedStr = tostring(data.text):match("-?%d+%.?%d*")
            rawSpeed = tonumber(speedStr) or 0
        elseif data.value then
            rawSpeed = tonumber(data.value) or 0
        end
    elseif type(data) == "string" then
        local speedStr = data:match("-?%d+%.?%d*")
        rawSpeed = tonumber(speedStr) or 0
    elseif type(data) == "number" then
        rawSpeed = data
    end
    
    return rawSpeed
end

-- Main loop
print("Starting speedometer. Press Ctrl+T to terminate.")
while true do
    if not inputSide or redstone.getInput(inputSide) then
        clearMonitor()
        
        -- Read raw speeds without modifying the sign
        local leftSpeed = leftTrack and getRawSpeed(leftTrack, 1) or 0
        local rightSpeed = rightTrack and getRawSpeed(rightTrack, 2) or 0

        -- Debug: Print speeds to console
        print("Left speed: " .. leftSpeed .. ", Right speed: " .. rightSpeed)
        
        -- Draw left dial with animation
        animateDial(10, 8, 7, leftSpeed, leftTrack ~= nil)
        
        -- Draw right dial with animation
        animateDial(30, 8, 7, rightSpeed, rightTrack ~= nil)
        
        -- Connection status
        monitor.setCursorPos(1, 1)
        monitor.setTextColor(colors.yellow)
        monitor.write("L: " .. (leftTrack and "OK" or "X") .. " R: " .. (rightTrack and "OK" or "X"))
    else
        -- If lever off, turn off screen
        clearMonitor()
    end
    sleep(0.1)
end
